import tkinter as tk
from tkinter import messagebox
import json

class TodoListApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List Application")
        self.root.geometry("400x600")
        self.root.config(bg="#f0f8ff")

        self.tasks = []
        self.load_tasks()

        # Create UI elements
        self.title_label = tk.Label(root, text="To-Do List", font=("Arial", 24, "bold"), bg="#f0f8ff")
        self.title_label.pack(pady=10)

        self.task_entry = tk.Entry(root, width=50, font=("Arial", 14))
        self.task_entry.pack(pady=10)

        self.add_task_button = tk.Button(root, text="Add Task", command=self.add_task, bg="#4caf50", fg="white", font=("Arial", 12))
        self.add_task_button.pack(pady=5)

        self.tasks_listbox = tk.Listbox(root, width=50, height=15, font=("Arial", 12), bg="#e0f7fa", selectbackground="#81d4fa")
        self.tasks_listbox.pack(pady=10)

        self.update_task_button = tk.Button(root, text="Update Task", command=self.update_task, bg="#ffa000", fg="white", font=("Arial", 12))
        self.update_task_button.pack(pady=5)

        self.delete_task_button = tk.Button(root, text="Delete Task", command=self.delete_task, bg="#f44336", fg="white", font=("Arial", 12))
        self.delete_task_button.pack(pady=5)

        self.mark_completed_button = tk.Button(root, text="Mark as Completed", command=self.mark_completed, bg="#2196f3", fg="white", font=("Arial", 12))
        self.mark_completed_button.pack(pady=5)

        self.recommendations_label = tk.Label(root, text="Recommendations:\n- Keep tasks short and clear.\n- Use deadlines for better management.\n- Review tasks regularly.", bg="#f0f8ff", font=("Arial", 12))
        self.recommendations_label.pack(pady=10)

        self.load_tasks_to_listbox()

    def load_tasks(self):
        try:
            with open('tasks.json', 'r') as f:
                self.tasks = json.load(f)
        except FileNotFoundError:
            self.tasks = []

    def save_tasks(self):
        with open('tasks.json', 'w') as f:
            json.dump(self.tasks, f)

    def load_tasks_to_listbox(self):
        self.tasks_listbox.delete(0, tk.END)
        for task in self.tasks:
            status = "✓" if task['completed'] else "✗"
            self.tasks_listbox.insert(tk.END, f"[{status}] {task['task']}")

    def add_task(self):
        task_text = self.task_entry.get()
        if task_text:
            self.tasks.append({'task': task_text, 'completed': False})
            self.save_tasks()
            self.load_tasks_to_listbox()
            self.task_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "You must enter a task.")

    def update_task(self):
        selected_task_index = self.tasks_listbox.curselection()
        if selected_task_index:
            new_task_text = self.task_entry.get()
            if new_task_text:
                index = selected_task_index[0]
                self.tasks[index]['task'] = new_task_text
                self.save_tasks()
                self.load_tasks_to_listbox()
                self.task_entry.delete(0, tk.END)
            else:
                messagebox.showwarning("Warning", "You must enter a new task.")
        else:
            messagebox.showwarning("Warning", "You must select a task to update.")

    def delete_task(self):
        selected_task_index = self.tasks_listbox.curselection()
        if selected_task_index:
            index = selected_task_index[0]
            del self.tasks[index]
            self.save_tasks()
            self.load_tasks_to_listbox()
        else:
            messagebox.showwarning("Warning", "You must select a task to delete.")

    def mark_completed(self):
        selected_task_index = self.tasks_listbox.curselection()
        if selected_task_index:
            index = selected_task_index[0]
            self.tasks[index]['completed'] = True
            self.save_tasks()
            self.load_tasks_to_listbox()
        else:
            messagebox.showwarning("Warning", "You must select a task to mark as completed.")

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoListApp(root)
    root.mainloop()
